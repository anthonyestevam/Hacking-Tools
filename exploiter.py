import requests
from bs4 import BeautifulSoup

def load_technologies(file_path):
    """Carrega tecnologias e suas versões de um arquivo."""
    technologies = {}
    with open(file_path, 'r') as file:
        for line in file:
            tech, version = line.strip().split(' ')
            technologies[tech] = version
    return technologies

def search_exploits_db(technology, version):
    """Busca exploits para uma tecnologia e versão específica na Exploit Database."""
    url = f"https://www.exploit-db.com/search?query={technology}+{version}"
    
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.text
    except requests.RequestException as e:
        print(f"Erro ao buscar exploits na Exploit Database para {technology} {version}: {e}")
        return None

def parse_exploit_db_results(html):
    """Faz o parsing dos resultados da Exploit Database."""
    soup = BeautifulSoup(html, 'html.parser')
    exploits = []
    
    for row in soup.find_all('div', class_='result'):
        title = row.find('a', class_='result-title').text.strip()
        link = row.find('a', class_='result-title')['href']
        exploits.append((title, link))
        
    return exploits

def search_exploits_metasploit(technology, version):
    """Busca exploits no Metasploit (exemplo básico)."""
    url = "https://www.rapid7.com/db/modules"
    query = f"{technology}+{version}"

    try:
        response = requests.get(url, params={"search": query})
        response.raise_for_status()
        return response.text
    except requests.RequestException as e:
        print(f"Erro ao buscar exploits no Metasploit para {technology} {version}: {e}")
        return None

def parse_metasploit_results(html):
    """Faz o parsing dos resultados do Metasploit."""
    soup = BeautifulSoup(html, 'html.parser')
    exploits = []

    for row in soup.find_all('div', class_='module'):
        title = row.find('h2', class_='module-title').text.strip()
        link = row.find('a', class_='module-title')['href']
        exploits.append((title, link))
        
    return exploits

def main():
    input_file = input("Techs File: ")
    technologies = load_technologies(input_file)
    
    for tech, version in technologies.items():
        print(f"\nBuscando exploits para {tech} {version} na Exploit Database...")
        db_html = search_exploits_db(tech, version)
        
        if db_html:
            db_exploits = parse_exploit_db_results(db_html)
            print(f"Exploits encontrados na Exploit Database para {tech} {version}:")
            for title, link in db_exploits:
                print(f"- {title}: {link}")
        
        print(f"\nBuscando exploits para {tech} {version} no Metasploit...")
        ms_html = search_exploits_metasploit(tech, version)
        
        if ms_html:
            ms_exploits = parse_metasploit_results(ms_html)
            print(f"Exploits encontrados no Metasploit para {tech} {version}:")
            for title, link in ms_exploits:
                print(f"- {title}: {link}")

if __name__ == "__main__":
    main()
